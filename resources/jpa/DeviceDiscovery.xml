<?xml version="1.0" encoding="UTF-8"?>

<!--
  OpenRemote, the Home of the Digital Home.
  Copyright 2008-2014, OpenRemote Inc.

  See the contributors.txt file in the distribution for a
  full listing of individual contributors.

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation; either version 3 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program; if not, see <http://www.gnu.org/licenses/>.
-->


<!--

  Persistence mapping for DeviceDiscovery class.

  To keep the different layers clearly separated (plain domain object layer used for data
  transfer from persistence implementation), utilizing XML based configuration for the domain
  object. Additional persistence configuration is included as annotations in the persistence
  implementation. JPA will combine this XML and annotations as required.

  The only part that requires special handling here is the embedded map collection for device
  attributes. It requires a separate table in the relational schema but to avoid having to split
  the domain object unnecessarily to separate classes we map it using JPA element collection.

  Author: Juha Lindfors

-->
<entity-mappings 
    xmlns = "http://java.sun.com/xml/ns/persistence/orm" 
    xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation = "http://java.sun.com/xml/ns/persistence/orm orm_2_0.xsd"
    version = "2.0">

  <!--
       Use Mapped superclass to pick up the fields from the domain object to include in
       persistence model.
  -->
  <mapped-superclass 
      class = "org.openremote.model.DeviceDiscovery" 
      metadata-complete = "false" 
      access = "FIELD">

    <!--
       The 'deviceAttributes' field requires special handling in order to map the internal
       key-value map to a separate table in relational schema. We'll end up with:

       +- - - - - - - - - - - -+          +- - - - - - - - - - - - - - -+
       |   DISCOVERED_DEVICE   |          | DISCOVERED_DEVICE_ATTRIBUTE |
       +- - -+- - -+- - -+- - -+          +- - - - - -+- - - - -+- - - -+
       | ID  | ... | ... | ... |  <- - -  | DD_ID(PK) | KEY(PK) | VALUE |
       +- - -+- - -+- - -+- - -+          +- - - - - -+- - - - -+- - - -+
    -->
    <attributes>
      <element-collection name = "deviceAttributes">

        <!--
          Name the device attribute key column in relational schema.
        -->
        <map-key-column name = "key"/>

        <!--
          Name the value column in relational schema
        -->
        <column name = "value"/>

        <!--
          Name the device attribute key,value table and the join column used to map the
          key,value pairs to devices.
        -->
        <collection-table name = "discovered_device_attributes">
          <join-column name = "discovered_device_id"/>
        </collection-table>

      </element-collection>
    </attributes>

  </mapped-superclass>

</entity-mappings>

